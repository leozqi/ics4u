import java.awt.*;
import java.awt.geom.*;
import java.util.Random;

public class Ball {
	private Rectangle2D.Double shape;
	private double startX, startY; // store the starting pos of x, y
	private double angle; // degrees for clear calculations
	private double speed;
	private boolean toggle; // toggles whether ball has already recalculated

	private VerticalD vFace;
	private HorizontalD hFace;

	private Random random = new Random();

	public Ball(int x, int y, int size, double angle, double speed) {
		this.shape = new Rectangle2D.Double(x, y, size, size);
		this.startX = x;
		this.startY = y;
		this.angle  = angle;
		this.speed  = speed;
		this.toggle = false;

		if (random.nextBoolean()) {
			this.vFace = VerticalD.UP;
		} else {
			this.vFace = VerticalD.DOWN;
		}

		if (random.nextBoolean()) {
			this.hFace = HorizontalD.LEFT;
		} else {
			this.hFace = HorizontalD.RIGHT;
		}
	}

	public void calcTraj(boolean pTouch, boolean cTouch, double maxW, double maxH, Rectangle2D.Double player, Rectangle2D.Double computer) {
		if (!(pTouch || cTouch
			|| (this.shape.getMaxX() >= maxW)
			|| (this.shape.getMinX() <= 0)
			|| (this.shape.getMaxY() >= maxH)
			|| (this.shape.getMinY() <= 0))) {
			this.toggle = false;
			return;
		} else if (this.toggle) {
			return;
		}

		//double newRise = this.shape.getY() - this.startY;
		//double newRun = this.shape.getX() - this.startX;

		//this.angle = Math.toDegrees(Math.atan(newRise / newRun));
		//System.out.println(angle);
		
		double yChange = this.shape.getY() - this.startY;
		double xChange = this.shape.getX() - this.startX;
		
		if ((!pTouch) && (!cTouch)) {
			if (yChange > 0) {
				// Ball was moving higher, flip
				this.vFace = VerticalD.DOWN;
			} else if (yChange < 0) {
				this.vFace = VerticalD.UP;
			} else {
				this.vFace = VerticalD.NEUTRAL;
			}
		}

		if (pTouch || cTouch) {
			if (xChange > 0) {
				this.hFace = HorizontalD.LEFT;
			} else if (xChange < 0) {
				this.hFace = HorizontalD.RIGHT;
			} else {
				this.hFace = HorizontalD.NEUTRAL;
			}

			if (pTouch) {
				this.angle += Math.floor(
					(player.getCenterY() - this.shape.getCenterY())
					/ this.shape.width
				);
			} else if (cTouch) {
				this.angle += Math.floor(
					(computer.getCenterY() - this.shape.getCenterY())
					/ this.shape.width
				);
			}
		}

		this.startX = this.shape.getX();
		this.startY = this.shape.getY();

		this.speed *= 1.05;

		this.toggle = true;
	}

	public void move(double maxW, double maxH) {
		double x = Math.cos(this.angle) * this.speed;
		double y = Math.sin(this.angle) * this.speed;

		if (this.vFace == VerticalD.DOWN) {
			y *= -1;
		}
		if (this.hFace == HorizontalD.LEFT) {
			x *= -1;
		}

		this.shape.setRect(
			this.shape.getX()+x, this.shape.getY()+y,
			this.shape.getWidth(), this.shape.getHeight()
		);
	}

	public Rectangle2D.Double getBounds() {
		return (Rectangle2D.Double) this.shape.getBounds2D();
	}
}
