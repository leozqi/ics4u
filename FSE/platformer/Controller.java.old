// ------------------------------------------------------------------------- //
// Provides an interface for player controls                                 //
//                                                                           //
// Author:      Leo Qi                                                       //
// Start date:  2022-01-04                                                   //
// Finish date:                                                              //
// ------------------------------------------------------------------------- //

package pong;

import java.awt.*;
import java.awt.geom.*;
import java.awt.event.*;
import java.util.Random;

public class Controller extends KeyAdapter {

	/**
	 * Initialize a new Paddle.
	 *
	 * See the `reset` method for how the paddle's position is determined.
	 *
	 * @param mode the mode of the paddle (See Mode.java for possible modes)
	 *             The NEUTRAL mode will result in the paddle being on the
	 *             right.
	 * @param side the side the paddle should be at (LEFT or RIGHT)
	 */
	public Paddle(Mode mode, HorizontalD side) {
		super();

		this.mode = mode;
		this.side = side;
		this.shape = new Rectangle2D.Double();

		this.reset();
	} /* End (Mode, HorizontalD) constructor */


	/**
	 * Initialize a default Paddle.
	 *
	 * The "default paddle" is used when the paddle's `setMode` method
	 * will be used to change its mode later. Its mode is COMPUTER_SIMPLE
	 * and its side is LEFT.
	 */
	public Paddle() {
		// Call own constructor
		this(Mode.COMPUTER_SIMPLE, HorizontalD.LEFT);
	} /* End default constructor */


	/**
	 * Resets the paddle to its default starting position.
	 *
	 * The paddle starts in on either the left or right side of the grid in
	 * the centre Y position and a neutral up/down direction.
	 */
	public void reset() {
		this.movingTo = VerticalD.NEUTRAL;

		// Set x position based on position being LEFT or RIGHT. NEUTRAL
		// position will result in a position of RIGHT.
		double xPos;
		if (this.side == HorizontalD.LEFT) {
			// P_SPACE is the padding between the paddle and the side.
			// 0 --------- | |
			//       ^     | |
			//    P_SPACE  | |
			xPos = 0 + P_SPACE;
		} else {
			// On the right, the width of the paddle is also taken into account
			xPos = S_WIDTH - P_SPACE - P_WIDTH;
		}

		// Set the rectangle representing the paddle to correspond with
		// starting position.
		this.shape.setRect(
			xPos,
			S_CENTRE_Y - (P_HEIGHT / 2),
			P_WIDTH,
			P_HEIGHT
		);
	} /* End method reset */


	/**
	 * Changes the direction of the paddle's vertical movement based on
	 * key presses.
	 *
	 * The left human player controls the paddle with the W/S keys while the
	 * right human player controls the paddle with the Left arrow/Right arrow
	 * keys.
	 *
	 * If the paddle is not a human player, it will exit out of this method
	 * immediately and not take into account key presses.
	 */
	@Override
	public void keyPressed(KeyEvent e) {
		if (this.mode != Mode.PLAYER) { return; }

		// Get integer key code of the pressed key
		int code = e.getKeyCode();

		// Only change direction based on the side of the paddle.
		switch (this.side) {
		case LEFT:
			switch (code) {
			case KeyEvent.VK_W:
				this.changeDirection(VerticalD.UP);
				break;
			case KeyEvent.VK_S:
				this.changeDirection(VerticalD.DOWN);
				break;
			}
			break;
		case RIGHT:
			switch (code) {
			case KeyEvent.VK_UP:
				this.changeDirection(VerticalD.UP);
				break;
			case KeyEvent.VK_DOWN:
				this.changeDirection(VerticalD.DOWN);
				break;
			}
			break;
		}
	} /* End method keyPressed */


	/**
	 * Changes the direction of the paddle's vertical movement to neutral
	 * when a key is released.
	 *
	 * If the paddle is not a human player, it will exit out of this method
	 * immediately nad not take into account key releases.
	 */
	@Override
	public void keyReleased(KeyEvent e) {

	}
} /* End class Paddle */
